##
##  Tigase XMPP/Jabber Test Suite
##  Copyright (C) 2004-2009 "Artur Hefczyc" <artur.hefczyc@tigase.org>
##
##  This program is free software: you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation, either version 3 of the License.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with this program. Look for COPYING file in the top folder.
##  If not, see http://www.gnu.org/licenses/.
##
##  $Rev$
##  Last modified by $Author$
##  $Date$
##
-version = "2.0.0"

-output-format  = html
-output-file    = "../www/functional-tests.html"
-output-history = yes
-history-format = separate-file
-output-cols    = 7
-title          = "XMPP Server functional tests."

$(server-host) = test-d
$(virtual-host) = test-domain
$(def-user)    = all-xmpp-test
$(def-user-pass) = all-xmpp-test-password
$(def-user-resr) = def-user-resource
$(daemon-user) = all-xmpp-test_1
$(blocking-user) = blocking-test-user_1
$(long-list-user) = long-list-user_1
$(ssl-tls-wait) = 15000
$(stats-user) = admin
$(stats-pass) = stats
$(tester-user) = tester_1
$(number) = 1


-serverip    = "127.0.0.1"
-host        = $(server-host)
-user-name   = $(def-user)
-user-pass   = $(def-user-pass)
-user-resr   = $(def-user-resr)
-number      = $(number)
-socket-wait = 15000
-base-ns     = "jabber:client"
-def-auth    = auth-sasl
-def-stream  = stream-client
-keys-file-password   = keystore
-trusts-file-password = truststore
-keys-file            = "certs/keystore"
-trusts-file          = "certs/client_truststore"

#-debug
-debug-on-error
-stop-on-fail = true

Global settings:
{
  -loop = 1

  Prepare@user-register: >> XEP-0077 - In-Band Registration, register <<

  Presence 1: {
    -multi-thread
    -delay = 250

    Subscription receive@common: {
      -user-name   = $(def-user)
      -user-pass   = $(def-user-pass)
      -user-resr   = $(def-user-resr)
      -to-jid = "$(stats-user)@$(server-host)/$(def-user-resr)"
      -source-file = "tests/data/SubscriptionReceive.cot"
     } >> Login and wait for subscription request from '$(stats-user)'. <<

    Subscription send@common: {
      -user-name = $(stats-user)
      -user-pass = $(stats-pass)
      -to-jid = "$(def-user)@$(server-host)/$(def-user-resr)"
      -source-file = "tests/data/SubscriptionSend.cot"
     } >> Login add user to the roster and send subscription request to '$(def-user)'. <<

  } >> Presence subscription test between '$(stats-user)' and '$(def-user)'. <<

  Presence 2: {
    -multi-thread
    -delay = 250

    Subscription receive@common: {
      -user-name   = $(def-user)
      -user-pass   = $(def-user-pass)
      -user-resr   = $(def-user-resr)
      -to-jid = "$(stats-user)@$(server-host)/$(def-user-resr)"
      -source-file = "tests/data/SubscriptionCancelReceive.cot"
     } >> Login and wait for subscription request from '$(stats-user)'. <<

    Subscription send@common: {
      -user-name = $(stats-user)
      -user-pass = $(stats-pass)
      -to-jid = "$(def-user)@$(server-host)/$(def-user-resr)"
      -source-file = "tests/data/SubscriptionCancelSend.cot"
     } >> Login add user to the roster and send subscription request to '$(def-user)'. <<

  } >> Presence cancel test between '$(stats-user)' and '$(def-user)'. <<

  Presence 3: {
    -multi-thread
    -delay = 250

    Subscription receive@common: {
      -user-name   = $(def-user)
      -user-pass   = $(def-user-pass)
      -user-resr   = $(def-user-resr)
      -to-jid = "$(stats-user)@$(server-host)/$(def-user-resr)"
      -source-file = "tests/data/SubscriptionUnsubscribeReceive.cot"
     } >> Login and wait for subscription request from '$(stats-user)'. <<

    Subscription send@common: {
      -user-name = $(stats-user)
      -user-pass = $(stats-pass)
      -to-jid = "$(def-user)@$(server-host)/$(def-user-resr)"
      -source-file = "tests/data/SubscriptionUnsubscribeSend.cot"
     } >> Login add user to the roster and send subscription request to '$(def-user)'. <<

  } >> Presence unsubscribe test between '$(stats-user)' and '$(def-user)'. <<

  Presence 4: {
    -multi-thread
    -delay = 250
    
    Subscription receive@common: {
      -user-name   = $(def-user)
      -user-pass   = $(def-user-pass)
      -user-resr   = $(def-user-resr)
      -to-jid = "$(stats-user)@$(server-host)/$(def-user-resr)"
      -source-file = "tests/data/SubscriptionReceive.cot"
     } >> Login and wait for subscription request from '$(stats-user)'. <<

    Subscription send@common: {
      -user-name = $(stats-user)
      -user-pass = $(stats-pass)
      -to-jid = "$(def-user)@$(server-host)/$(def-user-resr)"
      -source-file = "tests/data/SubscriptionSend.cot"
     } >> Login add user to the roster and send subscription request to '$(def-user)'. <<

  } >> Presence subscription between '$(stats-user)' and '$(def-user)' again to prepare for the next test. <<

  Presence 5: {
    -multi-thread
    -delay = 250

    Subscription receive@common: {
      -user-name   = $(def-user)
      -user-pass   = $(def-user-pass)
      -user-resr   = $(def-user-resr)
      -to-jid = "$(stats-user)@$(server-host)/$(def-user-resr)"
      -source-file = "tests/data/RemoveSubscribedReceive.cot"
     } >> Login and wait for subscription request from '$(stats-user)'. <<

    Subscription send@common: {
      -user-name = $(stats-user)
      -user-pass = $(stats-pass)
      -to-jid = "$(def-user)@$(server-host)/$(def-user-resr)"
      -source-file = "tests/data/RemoveSubscribedSend.cot"
     } >> Login add user to the roster and send subscription request to '$(def-user)'. <<

  } >> Remove subscribed contact '$(def-user)' from the roster of the user '$(stats-user)', all subscriptions should be cancelled automatically by the server. <<

  Presence 6: {
    -user-name   = $(def-user)
    -user-pass   = $(def-user-pass)
    -multi-thread
    -delay = 250

    Subscription receive@common: {
      -user-resr   = res-1
      -to-jid = "$(def-user)@$(server-host)/res-2"
      -source-file = "tests/data/PresenceWait.cot"
     } >> Login and wait for presence from another resource. <<

    Subscription send@common: {
      -user-resr   = res-2
      -to-jid = "$(def-user)@$(server-host)/res-1"
      -source-file = "tests/data/PresenceWait.cot"
     } >> Login and waut for presence from another resource. <<

  } >> 2 user connections, each using a different resource. <<

  Presence 7: {
    -multi-thread
    -delay = 250

    Subscription receive@common: {
      -user-name   = $(def-user)
      -user-pass   = $(def-user-pass)
      -user-resr   = $(def-user-resr)
      -to-jid = "$(stats-user)@$(server-host)/$(def-user-resr)"
      -source-file = "tests/data/SubscriptionDeniedReceive.cot"
    } >> Login and wait for subscription request from '$(stats-user)'. <<

    Subscription send@common: {
      -user-name = $(stats-user)
      -user-pass = $(stats-pass)
      -to-jid = "$(def-user)@$(server-host)/$(def-user-resr)"
      -source-file = "tests/data/SubscriptionDeniedSend.cot"
    } >> Login add user to the roster and send subscription request to '$(def-user)'. <<

  } >> Presence subscription deny test between '$(stats-user)' and '$(def-user)'. <<

}
>> Script generating large queues and network I/O traffic <<
  