##
##  Tigase XMPP/Jabber Test Suite
##  Copyright (C) 2004-2009 "Artur Hefczyc" <artur.hefczyc@tigase.org>
##
##  This program is free software: you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation, either version 3 of the License.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with this program. Look for COPYING file in the top folder.
##  If not, see http://www.gnu.org/licenses/.
##
##  $Rev$
##  Last modified by $Author$
##  $Date$
##
-version = "2.0.0"

-output-format  = html
-output-file    = "../www/functional-tests.html"
-output-history = yes
-history-format = separate-file
-output-cols    = 7
-title          = "XMPP Server functional tests."

$(server-host) = test-d
$(virtual-host) = test-domain
$(def-user)    = all-xmpp-test
$(def-user-pass) = all-xmpp-test-password
$(def-user-resr) = def-user-resource
$(daemon-user) = all-xmpp-test_1
$(blocking-user) = blocking-test-user_1
$(long-list-user) = long-list-user_1
$(ssl-tls-wait) = 15000
$(stats-user) = admin
$(stats-pass) = stats
$(tester-user) = tester_1
$(number) = 1


-serverip    = "127.0.0.1"
-host        = $(server-host)
-user-name   = $(def-user)
-user-pass   = $(def-user-pass)
-user-resr   = $(def-user-resr)
-number      = $(number)
-socket-wait = 15000
-base-ns     = "jabber:client"
-def-auth    = auth-sasl
-def-stream  = stream-client
-keys-file-password   = keystore
-trusts-file-password = truststore
-keys-file            = "certs/keystore"
-trusts-file          = "certs/client_truststore"

#-debug
-debug-on-error
-stop-on-fail = true

Global settings:
{
  -loop = 1
  $(vhost-1) = vhost-1
  $(vhosts-number) = 200

  Prepare@user-register: >> XEP-0077 - In-Band Registration, register <<

  VHost 1@common: {
    -to-jid = $(virtual-host)
    -source-file = "tests/data/UrnXmppPing.cot"
  } >> XEP-0199: XMPP Ping to virtual domain '$(virtual-host)' on the server <<

  VHost 2@common: {
    -source-file = "tests/data/NotAdminVHostReload.cot"
  } >> Reloading VHosts from non-admin account, expecting error message <<

  VHost 3@common: {
    -source-file = "tests/data/NotAdminVHostUpdate.cot"
  } >> Updating VHost from non-admin account, expecting error message <<

  VHost 4@common: {
    -source-file = "tests/data/NotAdminVHostRemove.cot"
  } >> Removing VHost from non-admin account, expecting error message <<

  VHost 5@common: {
    -user-name = $(stats-user)
    -user-pass = $(stats-pass)
    -number = 2
    -source-file = "tests/data/VHostReload.cot"
  } >> Reloading VHosts from admin account... <<

  VHost 6@common: {
    -to-jid = $(vhost-1)
    -source-file = "tests/data/PingNonExistenDomain.cot"
  } >> XEP-0199: XMPP Ping to virtual domain '$(vhost-1)' which is not on the server, expecting error response <<

  VHost 7@common: {
    -user-name = $(stats-user)
    -user-pass = $(stats-pass)
    -cdata = $(vhost-1)
    -number = 3
    -source-file = "tests/data/VHostAdd.cot"
  } >> Adding VHost '$(vhost-1)' from admin account <<

  VHost 8@common: {
    -to-jid = $(vhost-1)
    -source-file = "tests/data/UrnXmppPing.cot"
  } >> XEP-0199: XMPP Ping to virtual domain '$(vhost-1)' on the server <<

  VHost 9@common: {
    -user-name = $(stats-user)
    -user-pass = $(stats-pass)
    -cdata = $(vhost-1)
    -number = 2
    -source-file = "tests/data/VHostRemove.cot"
  } >> Removing VHost '$(vhost-1)' from admin account <<

  VHost 10@common: {
    -to-jid = $(vhost-1)
    -source-file = "tests/data/PingNonExistenDomain.cot"
  } >> XEP-0199: XMPP Ping to virtual domain '$(vhost-1)' which is not on the server, expecting error response <<

  VHost 11@common: {
    -loop = $(vhosts-number)
    -on-one-socket
    -to-jid = "vhost-$(loop)"
    -source-file = "tests/data/PingNonExistenDomain.cot"
  } >> XEP-0199: XMPP Ping $(vhosts-number) non-existen vhosts on the server, expecting error responses <<

  VHost 12@common: {
    -loop = $(vhosts-number)
    -on-one-socket
    -user-name = $(stats-user)
    -user-pass = $(stats-pass)
    -cdata = "vhost-$(loop)"
    -source-file = "tests/data/VHostAddSimple.cot"
  } >> Adding $(vhosts-number) virtual hosts from admin account <<

  VHost 13@common: {
    -loop = $(vhosts-number)
    -on-one-socket
    -to-jid = "vhost-$(loop)"
    -source-file = "tests/data/UrnXmppPing.cot"
  } >> XEP-0199: XMPP Ping all $(vhosts-number) virtual hosts on the server <<

  VHost 14@common: {
    -user-name = $(stats-user)
    -user-pass = $(stats-pass)
    -number = 202
    -source-file = "tests/data/VHostReload.cot"
  } >> Reloading all VHosts from admin account... <<

  VHost 15@common: {
    -loop = $(vhosts-number)
    -on-one-socket
    -user-name = $(stats-user)
    -user-pass = $(stats-pass)
    -cdata = "vhost-$(loop)"
    -source-file = "tests/data/VHostRemove.cot"
  } >> Removing $(vhosts-number) VHosts from admin account <<

  VHost 16@common: {
    -loop = $(vhosts-number)
    -on-one-socket
    -to-jid = "vhost-$(loop)"
    -source-file = "tests/data/PingNonExistenDomain.cot"
  } >> XEP-0199: XMPP Ping $(vhosts-number) non-existen vhosts on the server, expecting error responses <<

  VHost 17@common: {
    -user-name = $(stats-user)
    -user-pass = $(stats-pass)
    -number = 2
    -source-file = "tests/data/VHostReload.cot"
  } >> Reloading all VHosts from admin account... <<

}
>> Script generating large queues and network I/O traffic <<
  