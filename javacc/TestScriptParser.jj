options {
  JAVA_UNICODE_ESCAPE = true;
  STATIC = false;
  //  DEBUG_PARSER = true;
  //  DEBUG_LOOKAHEAD = true;
  //  DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(TestScript)

package tigase.test.parser;

import java.util.List;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Map;
import java.util.TreeMap;

public class TestScript {

  public static final String VERSION = "\"2.0.0\"";

  private List tests = new LinkedList();
  private Map globalPars = new TreeMap();
  private Map globalVars = new TreeMap();

  public List getTests() {
    return tests;
  }

  public Map getGlobalPars() {
    return globalPars;
  }

  public Map getGlobalVars() {
    return globalVars;
  }

  public static void main(String args[]) throws ParseException {
    TestScript parser = new TestScript(System.in);
    parser.Input();
    System.out.println("Tests found: \n");
    ListIterator lit = parser.tests.listIterator();
    while (lit.hasNext()) {
      TestNode tn = (TestNode)lit.next();
      System.out.print(tn.toString());
    }
  }

}

PARSER_END(TestScript)

SPECIAL_TOKEN: /* White space */
{
  "\n"
    | "\r"
    | "\f"
}

/* Comments */

SPECIAL_TOKEN:
{
  <COMMENT: "#" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
}

MORE:
{
  ">>": IN_LONG_DESCR
}

<IN_LONG_DESCR>
TOKEN:
{
  <LONGDESCR: "<<"> : DEFAULT
}

<IN_LONG_DESCR>
MORE:
{
  < ~[] >
}
TOKEN: /* Letters and digits */
{
  <#LETTER: [
             "\u0024",
             "\u0041"-"\u005a",
             "\u005f",
             "\u0061"-"\u007a",
             "\u00c0"-"\u00d6",
             "\u00d8"-"\u00f6",
             "\u00f8"-"\u00ff",
             "\u0100"-"\u1fff",
             "\u3040"-"\u318f",
             "\u3300"-"\u337f",
             "\u3400"-"\u3d2d",
             "\u4e00"-"\u9fff",
             "\uf900"-"\ufaff"
             ]>
    | <#DIGIT: [
                "\u0030"-"\u0039",
                "\u0660"-"\u0669",
                "\u06f0"-"\u06f9",
                "\u0966"-"\u096f",
                "\u09e6"-"\u09ef",
                "\u0a66"-"\u0a6f",
                "\u0ae6"-"\u0aef",
                "\u0b66"-"\u0b6f",
                "\u0be7"-"\u0bef",
                "\u0c66"-"\u0c6f",
                "\u0ce6"-"\u0cef",
                "\u0d66"-"\u0d6f",
                "\u0e50"-"\u0e59",
                "\u0ed0"-"\u0ed9",
                "\u1040"-"\u1049"
                ]>
    }

TOKEN: /* Literals */
{
  <STRING: "\"" (~["\"","\\","\n","\r"])* "\"">
    | <DECIMAL: <DIGIT> (<DIGIT>)*>
    | <SIMPLESTR: <LETTER> (<LETTER>|<DIGIT>|"-")*>
    | <VARNAME: "$" "(" <SIMPLESTR> ")">
    | <PARAMNAME: "-" <SIMPLESTR>>
    }

TOKEN: /* Basic test tokens */
{
  <COLON: ":">
    | <SEMICOLON: ";">
    | <AT: "@">
    | <LBRACE: "{">
    | <RBRACE: "}">
    | <ONERROR: "!!">
    }

TOKEN: /* Other tokens */
{
  <ASSIGN: "=">
    | <PLUS: "+">
    | <MINUS: "-">
    | <STAR: "*">
    | <SLASH: "/">
    }


void Input():
{
  TestNode tn = null;
  Token par = null;
  Token val = null;
  Map vars = null;
  Map pars = null;
}
{
  ( LOOKAHEAD(2)
    " "
    | vars = TestVars() { if (vars != null) globalVars.putAll(vars); }
    | pars = TestParams() { if (pars != null) globalPars.putAll(pars); }
    | tn = Test() { tests.add(tn); } )*
    {
      if (!globalPars.containsKey("-version") ||
          !globalPars.get("-version").toString().equals(VERSION)) {
        throw new ParseException("Incorrect version of script file, "
                                 + VERSION + " supported.");
      }
    }
    <EOF>
}

TestNode Test():
{
  TestNode tn = null;
  TestNode onError = null;
  String longDescr = null;
}
{
  tn = BasicTest()
    [ LOOKAHEAD(2) onError = OnError() ]
    longDescr = LongDescr()
  {
    if (onError != null) {
      tn.setOnError(onError);
      onError.setParent(tn);
    }
    tn.setLongDescr(longDescr);
    return tn;
  }
}

TestNode BasicTest():
{
  TestNode tn = new TestNode();
  TestNode child = null;
  String name = null;
  String id = null;
  String shortDescr = null;
  Map vars = null;
  Map pars = null;
}
{
  name = TestName() [ <AT> id = TestID() ] <COLON>
    [ LOOKAHEAD(2) shortDescr = ShortDescr() ]
    [ LOOKAHEAD(2)
      LBrace() ( LOOKAHEAD(2)
                 " "
                 | vars = TestVars() { if (vars != null) tn.addVars(vars); }
                 | pars = TestParams() { if (pars != null) tn.addPars(pars); }
                 | child = Test()
        { if (child != null) { tn.addChild(child); child.setParent(tn); } } )*
      RBrace() (" ")* ]
    {
      tn.setName(name);
      tn.setId(id);
      tn.setShortDescr(shortDescr);
      return tn;
    }
}

String TestName():
{
  Token token = null;
  StringBuilder buff = new StringBuilder();
}
{
  ( ( token = <SIMPLESTR> { buff.append(token.image); } )
    | ( token = <DECIMAL> { buff.append(token.image); } )
    | " " { buff.append(" "); } )+
    {
      return buff.toString();
    }
}

String TestID():
{
  Token token = null;
  StringBuilder buff = new StringBuilder();
}
{
  ( token = <SIMPLESTR> { buff.append(token.image); } )
    ( ( <SEMICOLON> { buff.append(";"); } )
      ( token = <SIMPLESTR> { buff.append(token.image); } ) )*
    {
      return buff.toString();
    }
}

String ShortDescr():
{
  Token token = null;
  StringBuilder buff = new StringBuilder();
  String tmp = null;
}
{
  ( ( token = <SIMPLESTR> { buff.append(token.image); } )
    | ( tmp = Expression() { buff.append(tmp); } )
    | " " { buff.append(" "); }
    | "\t" { buff.append("\t"); }
    | "?" { buff.append("?"); }
    | "!" { buff.append("!"); }
    | <MINUS> { buff.append("-"); }
    | "," { buff.append(","); } )+
    {
      return buff.toString();
    }
}

String Expression():
{
  Token token = null;
  StringBuilder buff = new StringBuilder();
}
{
  ( token = <VARNAME> { buff.append(token.image); }
    | token = <DECIMAL> { buff.append(token.image); } )
    ( LOOKAHEAD(2) ( " " { buff.append(' '); } )*
      ( <PLUS> { buff.append('+'); }
        | <MINUS> { buff.append('-'); }
        | <STAR> { buff.append('*'); }
        | <SLASH> { buff.append('/'); }
        ) ( " " { buff.append(' '); } )*
      ( token = <VARNAME> { buff.append(token.image); }
        | token = <DECIMAL> { buff.append(token.image); } ) )*
    {
      return buff.toString();
    }
}

void LBrace():
{}
{
  <LBRACE>
}

void RBrace():
{}
{
  <RBRACE>
}

TestNode OnError():
{
  TestNode onError = null;
}
{
  <ONERROR> ( LOOKAHEAD(2) " " )* onError = BasicTest()
  {
    return onError;
  }
}

String LongDescr():
{
  Token token = null;
}
{
  token = <LONGDESCR>
  {
    return token.image;
  }
}

Map TestVars():
{
  Map vars = new TreeMap();
  Token var = null;
  Token val = null;
}
{
  ( LOOKAHEAD(2) var = <VARNAME> ( " " )* <ASSIGN> ( " " )* val = Value()
  { vars.put(var.image, (val != null ? val.image : null)); } )+
    {
      return vars;
    }
}

Map TestParams():
{
  Map pars = new TreeMap();
  Token par = null;
  Token val = null;
}
{
  ( LOOKAHEAD(2) par = <PARAMNAME> ( LOOKAHEAD(2) " " )*
    [ <ASSIGN> ( " " )* ( val = Value() | val = <VARNAME> ) ]
  { pars.put(par.image, (val != null ? val.image : null)); } )+
    {
      return pars;
    }
}

Token Value():
{
  Token token = null;
}
{
  ( token = <DECIMAL> | token = <STRING> | token = <SIMPLESTR>)
    {
      return token;
    }
}
